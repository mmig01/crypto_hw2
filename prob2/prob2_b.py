import random

# Generated Safe Prime q: 224470527027036577030165096611490431408833575483417863131494443907115523626791927784514718954646227027573605956699207977129089099304224232854318290458022780307214753146332584138603880766684486520493576208355804644780099643649870587998976050351152240869595003122159581227457011920984219180291698129991620003083
# Corresponding Prime p: 112235263513518288515082548305745215704416787741708931565747221953557761813395963892257359477323113513786802978349603988564544549652112116427159145229011390153607376573166292069301940383342243260246788104177902322390049821824935293999488025175576120434797501561079790613728505960492109590145849064995810001541

def find_generator(q, p):
    """Find a generator for Z_q* when q = 2p + 1 and p is prime."""
    while True:
        a = random.randint(2, q - 1)  # Random a in Z_q*
        # k = 1, 2 , p 인 경우
        if pow(a, 1, q) != 1 and pow(a, 2, q) != 1 and pow(a, p, q) != 1:  # Check conditions
            return a

# Example usage:
q = 224470527027036577030165096611490431408833575483417863131494443907115523626791927784514718954646227027573605956699207977129089099304224232854318290458022780307214753146332584138603880766684486520493576208355804644780099643649870587998976050351152240869595003122159581227457011920984219180291698129991620003083  # Safe prime
p = 112235263513518288515082548305745215704416787741708931565747221953557761813395963892257359477323113513786802978349603988564544549652112116427159145229011390153607376573166292069301940383342243260246788104177902322390049821824935293999488025175576120434797501561079790613728505960492109590145849064995810001541  # q = 2p + 1
generator = find_generator(q, p)
print(f"Generator for Z*{q}: \n\n{generator}")